/*
 ****************************************************************************
 *
 *                   "DHRYSTONE" Benchmark Program
 *                   
 *                                                                            
 *  Version:    C, Version 2.1
 *                                                                            
 *  File:       dhry.h (part 1 of 3)
 *
 *  Date:       May 25, 1988
 *
 *  Author:     Reinhold P. Weicker
 *                      Siemens AG, AUT E 51
 *                      Postfach 3220
 *                      8520 Erlangen
 *                      Germany (West)
 *                              Phone:  [+49]9131720330
 *                                      (817 Central European Time)
 *                              Usenet: ..!mcsun!unido!estevax!weicker
 *
 *              Original Version (in Ada) published in
 *              "Communications of the ACM" vol. 27., no. 10 (Oct. 1984),
 *              pp. 1013  1030, together with the statistics
 *              on which the distribution of statements etc. is based.
 *
 *              In this C version, the following C library functions are used:
 *               strcpy, strcmp (inside the measurement loop)
 *               printf, scanf (outside the measurement loop)
 *              In addition, Berkeley UNIX system calls "times ()" or "time ()"
 *              are used for execution time measurement. For measurements
 *              on other systems, these calls have to be changed.
 *
 *  Collection of Results:
 *              Reinhold Weicker (address see above) and
 *              
 *              Rick Richardson
 *              PC Research. Inc.
 *              94 Apple Orchard Drive
 *              Tinton Falls, NJ 07724
 *                      Phone:  (201) 3898963 (917 EST)               
 *                      Usenet: ...!uunet!pcrat!rick
 *
 *      Please send results to Rick Richardson and/or Reinhold Weicker.
 *      Complete information should be given on hardware and software used.
 *      Hardware information includes: Machine type, CPU, type and size
 *      of caches; for microprocessors: clock frequency, memory speed
 *      (number of wait states).
 *      Software information includes: Compiler (and runtime library)
 *      manufacturer and version, compilation switches, OS version.
 *      The Operating System version may give an indication about the
 *      compiler; Dhrystone itself performs no OS calls in the measurement loop.
 *
 *      The complete output generated by the program should be mailed
 *      such that at least some checks for correctness can be made.
 *
 ***************************************************************************
 *
 *  History:    This version C/2.1 has been made for two reasons:
 *
 *              1) There is an obvious need for a common C version of
 *              Dhrystone, since C is at present the most popular system
 *              programming language for the class of processors
 *              (microcomputers, minicomputers) where Dhrystone is used most.
 *              There should be, as far as possible, only one C version of
 *              Dhrystone such that results can be compared without
 *              restrictions. In the past, the C versions distributed
 *              by Rick Richardson (Version 1.1) and by Reinhold Weicker
 *              had small (though not significant) differences.
 *
 *              2) As far as it is possible without changes to the Dhrystone
 *              statistics, optimizing compilers should be prevented from
 *              removing significant statements.
 *
 *              This C version has been developed in cooperation with
 *              Rick Richardson (Tinton Falls, NJ), it incorporates many
 *              ideas from the "Version 1.1" distributed previously by
 *              him over the UNIX network Usenet.
 *              I also thank Chaim Benedelac (National Semiconductor),
 *              David Ditzel (SUN), Earl Killian and John Mashey (MIPS),
 *              Alan Smith and Rafael SaavedraBarrera (UC at Berkeley)
 *              for their help with comments on earlier versions of the
 *              benchmark.
 *
 *  Changes:    In the initialization part, this version follows mostly
 *              Rick Richardson's version distributed via Usenet, not the
 *              version distributed earlier via floppy disk by Reinhold Weicker.
 *              As a concession to older compilers, names have been made
 *              unique within the first 8 characters.
 *              Inside the measurement loop, this version follows the
 *              version previously distributed by Reinhold Weicker.
 *
 *              At several places in the benchmark, code has been added,
 *              but within the measurement loop only in branches that 
 *              are not executed. The intention is that optimizing compilers
 *              should be prevented from moving code out of the measurement
 *              loop, or from removing code altogether. Since the statements
 *              that are executed within the measurement loop have NOT been
 *              changed, the numbers defining the "Dhrystone distribution"
 *              (distribution of statements, operand types and locality)
 *              still hold. Except for sophisticated optimizing compilers,
 *              execution times for this version should be the same as
 *              for previous versions.
 *              
 *              Since it has proven difficult to subtract the time for the
 *              measurement loop overhead in a correct way, the loop check
 *              has been made a part of the benchmark. This does have
 *              an impact  though a very minor one  on the distribution
 *              statistics which have been updated for this version.
 *
 *              All changes within the measurement loop are described
 *              and discussed in the companion paper "Rationale for
 *              Dhrystone version 2".
 *
 *              Because of the selfimposed limitation that the order and
 *              distribution of the executed statements should not be
 *              changed, there are still cases where optimizing compilers
 *              may not generate code for some statements. To a certain
 *              degree, this is unavoidable for small synthetic benchmarks.
 *              Users of the benchmark are advised to check code listings
 *              whether code is generated for all statements of Dhrystone.
 *
 *              Version 2.1 is identical to version 2.0 distributed via
 *              the UNIX network Usenet in March 1988 except that it corrects
 *              some minor deficiencies that were found by users of version 2.0.
 *              The only change within the measurement loop is that a
 *              nonexecuted "else" part was added to the "if" statement in
 *              Func_3, and a nonexecuted "else" part removed from Proc_3.
 *
 ***************************************************************************
 *
 * Defines:     The following "Defines" are possible:
 *              DREG=register          (default: Not defined)
 *                      As an approximation to what an average C programmer
 *                      might do, the "register" storage class is applied
 *                      (if enabled by DREG=register)
 *                       for local variables, if they are used (dynamically)
 *                        five or more times
 *                       for parameters if they are used (dynamically)
 *                        six or more times
 *                      Note that an optimal "register" strategy is
 *                      compilerdependent, and that "register" declarations
 *                      do not necessarily lead to faster execution.
 *              DNOSTRUCTASSIGN        (default: Not defined)
 *                      Define if the C compiler does not support
 *                      assignment of structures.
 *              DNOENUMS               (default: Not defined)
 *                      Define if the C compiler does not support
 *                      enumeration types.
 *              DTIMES                 (default)
 *              DTIME
 *                      The "times" function of UNIX (returning process times)
 *                      or the "time" function (returning wallclock time)
 *                      is used for measurement. 
 *                      For single user machines, "time ()" is adequate. For
 *                      multiuser machines where you cannot get singleuser
 *                      access, use the "times ()" function. If you have
 *                      neither, use a stopwatch in the dead of night.
 *                      "printf"s are provided marking the points "Start Timer"
 *                      and "Stop Timer". DO NOT use the UNIX "time(1)"
 *                      command, as this will measure the total time to
 *                      run this program, which will (erroneously) include
 *                      the time to allocate storage (malloc) and to perform
 *                      the initialization.
 *              DHZ=nnn
 *                      In Berkeley UNIX, the function "times" returns process
 *                      time in 1/HZ seconds, with HZ = 60 for most systems.
 *                      CHECK YOUR SYSTEM DESCRIPTION BEFORE YOU JUST APPLY
 *                      A VALUE.
 *
 ***************************************************************************
 *
 *  Compilation model and measurement (IMPORTANT):
 *
 *  This C version of Dhrystone consists of three files:
 *   dhry.h (this file, containing global definitions and comments)
 *   dhry_1.c (containing the code corresponding to Ada package Pack_1)
 *   dhry_2.c (containing the code corresponding to Ada package Pack_2)
 *
 *  The following "ground rules" apply for measurements:
 *   Separate compilation
 *   No procedure merging
 *   Otherwise, compiler optimizations are allowed but should be indicated
 *   Default results are those without register declarations
 *  See the companion paper "Rationale for Dhrystone Version 2" for a more
 *  detailed discussion of these ground rules.
 *
 *  For 16Bit processors (e.g. 80186, 80286), times for all compilation
 *  models ("small", "medium", "large" etc.) should be given if possible,
 *  together with a definition of these models for the compiler system used.
 *
 **************************************************************************
 *
 *  Dhrystone (C version) statistics:
 *
 *  [Comment from the first distribution, updated for version 2.
 *   Note that because of language differences, the numbers are slightly
 *   different from the Ada version.]
 *
 *  The following program contains statements of a high level programming
 *  language (here: C) in a distribution considered representative:           
 *
 *    assignments                  52 (51.0 %)
 *    control statements           33 (32.4 %)
 *    procedure, function calls    17 (16.7 %)
 *
 *  103 statements are dynamically executed. The program is balanced with
 *  respect to the three aspects:                                             
 *
 *     statement type
 *     operand type
 *     operand locality
 *         operand global, local, parameter, or constant.                     
 *
 *  The combination of these three aspects is balanced only approximately.    
 *
 *  1. Statement Type:                                                        
 *               number
 *
 *     V1 = V2                     9
 *       (incl. V1 = F(..)
 *     V = Constant               12
 *     Assignment,                 7
 *       with array element
 *     Assignment,                 6
 *       with record component
 *                                
 *                                34       34
 *
 *     X = Y +||"&&"|"|" Z        5
 *     X = Y +||"==" Constant     6
 *     X = X +| 1                 3
 *     X = Y *|/ Z                 2
 *     X = Expression,             1
 *           two operators
 *     X = Expression,             1
 *           three operators
 *                                
 *                                18       18
 *
 *     if ....                    14
 *       with "else"      7
 *       without "else"   7
 *           executed        3
 *           not executed    4
 *     for ...                     7  |  counted every time
 *     while ...                   4  |  the loop condition
 *     do ... while                1  |  is evaluated
 *     switch ...                  1
 *     break                       1
 *     declaration with            1
 *       initialization
 *                                
 *                                34       34
 *
 *     P (...)  procedure call    11
 *       user procedure      10
 *       library procedure    1
 *     X = F (...)
 *             function  call      6
 *       user function        5                                         
 *       library function     1                                               
 *                                                                          
 *                                17       17
 *                                        
 *                                        103
 *
 *    The average number of parameters in procedure or function calls
 *    is 1.82 (not counting the function values as implicit parameters).
 *
 *
 *  2. Operators
 *  
 *                          number    approximate
 *                                    percentage
 *
 *    Arithmetic             32          50.8                                 
 *
 *       +                     21          33.3                              
 *                             7          11.1                              
 *       *                      3           4.8
 *       / (int div)            1           1.6
 *
 *    Comparison             27           42.8
 *
 *       ==                     9           14.3
 *       /=                     4            6.3
 *       >                      1            1.6
 *       <                      3            4.8
 *       >=                     1            1.6
 *       <=                     9           14.3
 *
 *    Logic                   4            6.3
 *
 *       && (ANDTHEN)          1            1.6
 *       |  (OR)                1            1.6
 *       !  (NOT)               2            3.2
 * 
 *                                     
 *                           63          100.1
 *
 *
 *  3. Operand Type (counted once per operand reference):
 *  
 *                          number    approximate
 *                                    percentage
 *
 *     Integer               175        72.3 %
 *     Character              45        18.6 %
 *     Pointer                12         5.0 %
 *     String30                6         2.5 %
 *     Array                   2         0.8 %
 *     Record                  2         0.8 %
 *                                  
 *                           242       100.0 %
 *
 *  When there is an access path leading to the final operand (e.g. a record
 *  component), only the final data type on the access path is counted.       
 *
 *
 *  4. Operand Locality:                                                      
 *  
 *                                number    approximate
 *                                          percentage
 *
 *     local variable              114        47.1 %
 *     global variable              22         9.1 %
 *     parameter                    45        18.6 %
 *        value                        23         9.5 %
 *        reference                    22         9.1 %
 *     function result               6         2.5 %
 *     constant                     55        22.7 %
 *                                        
 *                                 242       100.0 %
 *
 *
 *  The program does not compute anything meaningful, but it is syntactically
 *  and semantically correct. All variables have a value assigned to them
 *  before they are used as a source operand.
 *
 *  There has been no explicit effort to account for the effects of a
 *  cache, or to balance the use of long or short displacements for code or
 *  data.
 *
 ***************************************************************************
 */

/* Compiler and system dependent definitions: */

//#define TIMES

//typedef int     int;
//typedef int     int;
//typedef char    char;
//typedef int     bool;
//typedef char    Str_30 [31];
//typedef int     Arr_1_Dim [50];
//typedef int     Arr_2_Dim [50] [50];

using System;
using Microsoft.Zelig.Runtime;
using System.Globalization;
namespace Zelig.UnitTest.Peformance
{
    [ExtendClass( typeof( System.Text.StringBuilder ), NoConstructors = true )]
    public class StringBuilderImpl
    {
        public System.Text.StringBuilder AppendFormat( System.IFormatProvider fmt, string str, object[] args )
        {
            throw new NotSupportedException();
        }
    }

    public class DhrystoneTest
    {
        /* Use times(2) time function unless    */
        /* explicitly defined otherwise         */

        //const double Mic_secs_Per_Second = 1000000.0;
        /* Berkeley UNIX C returns process times in seconds/HZ */

        public enum Enumeration { Ident_1, Ident_2, Ident_3, Ident_4, Ident_5 };
        /* for bool and enumeration types in Ada, Pascal */

        /* General definitions: */

        public class Variant
        {
            public Enumeration Enum_Comp;
            public int Int_Comp;
            public char[] Str_Comp;

            public Variant()
            {
                Enum_Comp = Enumeration.Ident_1;
                Int_Comp = 0;
                Str_Comp = new char[30];
            }
        }

        public class Rec_Type
        {
            public Rec_Type Ptr_Comp;
            public Enumeration Discr;
            public Variant variant;

            public Rec_Type()
            {
                Discr = Enumeration.Ident_1;
                Ptr_Comp = null;
                variant = new Variant();
            }
        }


        /*
         ****************************************************************************
         *
         *                   "DHRYSTONE" Benchmark Program
         *                   
         *                                                                            
         *  Version:    C, Version 2.1
         *                                                                            
         *  File:       dhry_1.c (part 2 of 3)
         *
         *  Date:       May 25, 1988
         *
         *  Author:     Reinhold P. Weicker
         *
         ****************************************************************************
         */

        /* Global Variables: */

        Rec_Type Ptr_Glob,
                        Next_Ptr_Glob;
        int Int_Glob;
        bool Bool_Glob;
        char Ch_1_Glob,
                        Ch_2_Glob;
        int[] Arr_1_Glob = new int[50];
        int[/*,*/] Arr_2_Glob = new int[50 * 50];

        /* variables for time measurement: */

        /* see library function "times" */
        readonly TimeSpan Too_Small_Time = new TimeSpan( 0, 0, 2 );
        /* Measurements should last at least about 2 seconds */

        DateTime Begin_Time,
                        End_Time;
        TimeSpan User_Time;
        int DrystonesPerSecond;
        double Microseconds,
                        Dhrystones_Per_Second;

        /* end of variables for time measurement */


        public static void Main()
        {
            DhrystoneTest t = new DhrystoneTest();
            t.TestMain( 500000 );
        }
        /*****/

        private readonly char[] c_SomeString;
        private readonly char[] c_FirstString;
        private readonly char[] c_SecondString;
        private readonly char[] c_ThirdString;

        public DhrystoneTest()
        {
            c_SomeString   = "DHRYSTONE PROGRAM, SOME STRING".ToCharArray();
            c_FirstString  = "DHRYSTONE PROGRAM, 1'ST STRING".ToCharArray();
            c_SecondString = "DHRYSTONE PROGRAM, 2'ND STRING".ToCharArray();
            c_ThirdString  = "DHRYSTONE PROGRAM, 3'RD STRING".ToCharArray();
        }

        public void TestMain( int Number_Of_Runs )

  /* main program, corresponds to procedures        */
        /* Main and Proc_0 in the Ada version             */
        {
            int Int_1_Loc = 0;
            int Int_2_Loc = 0;
            int Int_3_Loc = 0;
            char Ch_Index;
            Enumeration Enum_Loc = Enumeration.Ident_5;
            char[] Str_1_Loc = new char[30];
            char[] Str_2_Loc = new char[30];
            int Run_Index;
            //int Number_Of_Runs = numRuns;

            /* Initializations */

            Next_Ptr_Glob = new Rec_Type();
            Ptr_Glob = new Rec_Type();

            Ptr_Glob.Ptr_Comp = Next_Ptr_Glob;
            Ptr_Glob.Discr = Enumeration.Ident_1;
            Ptr_Glob.variant.Enum_Comp = Enumeration.Ident_3;
            Ptr_Glob.variant.Int_Comp = 40;
            Array.Copy( c_SomeString, Ptr_Glob.variant.Str_Comp, c_SomeString.Length );
            Array.Copy( c_FirstString, Str_1_Loc, c_FirstString.Length );

            Arr_2_Glob[8 + 7 * 50] = 10;
            /* Was missing in published program. Without this statement,    */
            /* Arr_2_Glob [8][7] would have an undefined value.             */
            /* Warning: With 16Bit processors and Number_Of_Runs > 32000,  */
            /* overflow may occur for this array element.                   */

#if PRINTOUT
            Console.WriteLine( "" );
            Console.WriteLine( "Dhrystone Benchmark, Version 2.1 (Language: C#)" );
            Console.WriteLine( "" );
            //Console.WriteLine("Please give the number of runs through the benchmark: ");
            //{
            //  int n;
            //  scanf ("{0}", &n);
            //  Number_Of_Runs = n;
            //}
            Console.WriteLine( "" );

            Console.WriteLine( "Execution starts, {0} runs through Dhrystone", Number_Of_Runs );
#endif

            /***************/
            /* Start timer */
            /***************/

            Begin_Time = DateTime.Now;

            for(Run_Index = 1; Run_Index <= Number_Of_Runs; ++Run_Index)
            {

                Proc_5();
                Proc_4();
                /* Ch_1_Glob == 'A', Ch_2_Glob == 'B', Bool_Glob == true */
                Int_1_Loc = 2;
                Int_2_Loc = 3;
                Array.Copy( c_SecondString, Str_2_Loc, c_SecondString.Length );
                Enum_Loc = Enumeration.Ident_2;
                Bool_Glob = !Func_2( Str_1_Loc, Str_2_Loc );
                /* Bool_Glob == 1 */
                while(Int_1_Loc < Int_2_Loc)  /* loop body executed once */
                {
                    Int_3_Loc = 5 * Int_1_Loc - Int_2_Loc;
                    /* Int_3_Loc == 7 */
                    Proc_7( Int_1_Loc, Int_2_Loc, ref Int_3_Loc );
                    /* Int_3_Loc == 7 */
                    Int_1_Loc += 1;
                } /* while */
                /* Int_1_Loc == 3, Int_2_Loc == 3, Int_3_Loc == 7 */
                Proc_8( Arr_1_Glob, Arr_2_Glob, Int_1_Loc, Int_3_Loc );
                /* Int_Glob == 5 */
                Proc_1( ref Ptr_Glob );
                for(Ch_Index = 'A'; Ch_Index <= Ch_2_Glob; ++Ch_Index)
                /* loop body executed twice */
                {
                    if(Enum_Loc == Func_1( Ch_Index, 'C' ))
                    /* then, not executed */
                    {
                        Proc_6( Enumeration.Ident_1, ref Enum_Loc );
                        Array.Copy( c_ThirdString, Str_2_Loc, c_ThirdString.Length );
                        Int_2_Loc = Run_Index;
                        Int_Glob = Run_Index;
                    }
                }
                /* Int_1_Loc == 3, Int_2_Loc == 3, Int_3_Loc == 7 */
                Int_2_Loc = Int_2_Loc * Int_1_Loc;
                Int_1_Loc = Int_2_Loc / Int_3_Loc;
                Int_2_Loc = 7 * ( Int_2_Loc - Int_3_Loc ) - Int_1_Loc;
                /* Int_1_Loc == 1, Int_2_Loc == 13, Int_3_Loc == 7 */
                Proc_2( ref Int_1_Loc );
                /* Int_1_Loc == 5 */

            } /* loop "for Run_Index" */

            /**************/
            /* Stop timer */
            /**************/

            End_Time = DateTime.Now;

#if PRINTOUT
            Console.WriteLine( "Execution ends" );
            Console.WriteLine( "" );
            Console.WriteLine( "Final values of the variables used in the benchmark:" );
            Console.WriteLine( "" );
            Console.WriteLine( "Int_Glob:            {0}", Int_Glob );
            Console.WriteLine( "        should be:   {0}", 5 );
            Console.WriteLine( "Bool_Glob:           {0}", Bool_Glob );
            Console.WriteLine( "        should be:   {0}", "True" );
            Console.WriteLine( "Ch_1_Glob:           {0}", Ch_1_Glob );
            Console.WriteLine( "        should be:   {0}", 'A' );
            Console.WriteLine( "Ch_2_Glob:           {0}", Ch_2_Glob );
            Console.WriteLine( "        should be:   {0}", 'B' );
            Console.WriteLine( "Arr_1_Glob[8]:       {0}", Arr_1_Glob[8] );
            Console.WriteLine( "        should be:   {0}", 7 );
            Console.WriteLine( "Arr_2_Glob[8][7]:    {0}", Arr_2_Glob[8 + 7 * 50] );
            Console.WriteLine( "        should be:   Number_Of_Runs + 10" );
            Console.WriteLine( "Ptr_Glob>" );
            Console.WriteLine( "  Ptr_Comp:          {0}", Ptr_Glob.Ptr_Comp );
            Console.WriteLine( "        should be:   (implementationdependent)" );
            Console.WriteLine( "  Discr:             {0}", (int)Ptr_Glob.Discr );
            Console.WriteLine( "        should be:   {0}", 0 );
            Console.WriteLine( "  Enum_Comp:         {0}", (int)Ptr_Glob.variant.Enum_Comp );
            Console.WriteLine( "        should be:   {0}", 2 );
            Console.WriteLine( "  Int_Comp:          {0}", Ptr_Glob.variant.Int_Comp );
            Console.WriteLine( "        should be:   {0}", 17 );
            Console.WriteLine( "  Str_Comp:          {0}", new string( Ptr_Glob.variant.Str_Comp ) );
            Console.WriteLine( "        should be:   DHRYSTONE PROGRAM, SOME STRING" );
            Console.WriteLine( "Next_Ptr_Glob>" );
            Console.WriteLine( "  Ptr_Comp:          {0}", Next_Ptr_Glob.Ptr_Comp );
            Console.WriteLine( "        should be:   (implementationdependent), same as above" );
            Console.WriteLine( "  Discr:             {0}", (int)Next_Ptr_Glob.Discr );
            Console.WriteLine( "        should be:   {0}", 0 );
            Console.WriteLine( "  Enum_Comp:         {0}", (int)Next_Ptr_Glob.variant.Enum_Comp );
            Console.WriteLine( "        should be:   {0}", 1 );
            Console.WriteLine( "  Int_Comp:          {0}", (int)Next_Ptr_Glob.variant.Int_Comp );
            Console.WriteLine( "        should be:   {0}", 18 );
            Console.WriteLine( "  Str_Comp:          {0}",
                                          Next_Ptr_Glob.variant.Str_Comp );
            Console.WriteLine( "        should be:   DHRYSTONE PROGRAM, SOME STRING" );
            Console.WriteLine( "Int_1_Loc:           {0}", Int_1_Loc );
            Console.WriteLine( "        should be:   {0}", 5 );
            Console.WriteLine( "Int_2_Loc:           {0}", Int_2_Loc );
            Console.WriteLine( "        should be:   {0}", 13 );
            Console.WriteLine( "Int_3_Loc:           {0}", Int_3_Loc );
            Console.WriteLine( "        should be:   {0}", 7 );
            Console.WriteLine( "Enum_Loc:            {0}", (int)Enum_Loc );
            Console.WriteLine( "        should be:   {0}", 1 );
            Console.WriteLine( "Str_1_Loc:           {0}", new string( Str_1_Loc ) );
            Console.WriteLine( "        should be:   DHRYSTONE PROGRAM, 1'ST STRING" );
            Console.WriteLine( "Str_2_Loc:           {0}", new string( Str_2_Loc ) );
            Console.WriteLine( "        should be:   DHRYSTONE PROGRAM, 2'ND STRING" );
            Console.WriteLine( "" );
#endif

            User_Time = End_Time - Begin_Time;

#if PRINTOUT
            if(User_Time < Too_Small_Time)
            {
                Console.WriteLine( "Measured time too small to obtain meaningful results" );
                Console.WriteLine( "Please increase number of runs" );
                Console.WriteLine( "" );
            }
            //else
#endif
            {
                Microseconds = (double)(User_Time.Ticks / (TimeSpan.TicksPerMillisecond/1000))
                                    / (double)Number_Of_Runs;
                Dhrystones_Per_Second = (double)(Number_Of_Runs * TimeSpan.TicksPerSecond) / (double)User_Time.Ticks;

                DrystonesPerSecond = (int)(Dhrystones_Per_Second + 0.5);
#if PRINTOUT
                Console.WriteLine( "Microseconds for one run through Dhrystone: " );
                Console.WriteLine( "{0} ", Microseconds );
                Console.WriteLine( "Dhrystones per Second:                      " );
                Console.WriteLine( "{0} ", Dhrystones_Per_Second );
                Console.WriteLine( "" );
#endif
            }

        }

        private void structassign( Rec_Type a, Rec_Type b )
        {
            a.Discr = b.Discr;
            a.Ptr_Comp = b.Ptr_Comp;
            a.variant.Enum_Comp = b.variant.Enum_Comp;
            a.variant.Int_Comp = b.variant.Int_Comp;
            Array.Copy( b.variant.Str_Comp, a.variant.Str_Comp, a.variant.Str_Comp.Length );
        }

        private void Proc_1( ref Rec_Type Ptr_Val_Par )
        /******************/
        /* executed once */
        {
            Rec_Type Next_Record = Ptr_Val_Par.Ptr_Comp;
            /* == Ptr_Glob_Next */
            /* Local variable, initialized with Ptr_Val_Par.Ptr_Comp,     */
            /* corresponds to "rename" in Ada, "with" in Pascal           */

            structassign( Ptr_Val_Par.Ptr_Comp, Ptr_Glob );

            Ptr_Val_Par.variant.Int_Comp = 5;
            Next_Record.variant.Int_Comp
                  = Ptr_Val_Par.variant.Int_Comp;
            Next_Record.Ptr_Comp = Ptr_Val_Par.Ptr_Comp;

            Rec_Type tmp = Next_Record.Ptr_Comp;
            Proc_3( ref tmp );
            Next_Record.Ptr_Comp = tmp;
            /* Ptr_Val_Par.Ptr_Comp.Ptr_Comp 
                                == Ptr_Glob.Ptr_Comp */
            if(Next_Record.Discr == Enumeration.Ident_1)
            /* then, executed */
            {
                Next_Record.variant.Int_Comp = 6;
                Enumeration tmpE = Next_Record.variant.Enum_Comp;
                Proc_6( Ptr_Val_Par.variant.Enum_Comp,
                       ref tmpE );
                Next_Record.variant.Enum_Comp = tmpE;
                Next_Record.Ptr_Comp = Ptr_Glob.Ptr_Comp;
                int tmpI = Next_Record.variant.Int_Comp;
                Proc_7( Next_Record.variant.Int_Comp, 10,
                       ref tmpI );
                Next_Record.variant.Int_Comp = tmpI;
            }
            else /* not executed */
            {
                structassign( Ptr_Val_Par, Ptr_Val_Par.Ptr_Comp );
            }
        } /* Proc_1 */


        private void Proc_2( ref int Int_Par_Ref )
        /******************/
        /* executed once */
        /* *Int_Par_Ref == 1, becomes 4 */
        {
            int Int_Loc;
            Enumeration Enum_Loc = Enumeration.Ident_5;

            Int_Loc = Int_Par_Ref + 10;
            do /* executed once */
                if(Ch_1_Glob == 'A')
                /* then, executed */
                {
                    Int_Loc -= 1;
                    Int_Par_Ref = Int_Loc - Int_Glob;
                    Enum_Loc = Enumeration.Ident_1;
                } /* if */
            while(Enum_Loc != Enumeration.Ident_1); /* true */
        } /* Proc_2 */


        private void Proc_3( ref Rec_Type Ptr_Ref_Par )
        /******************/
        /* executed once */
        /* Ptr_Ref_Par becomes Ptr_Glob */
        {
            if(Ptr_Glob != null)
                /* then, executed */
                Ptr_Ref_Par = Ptr_Glob.Ptr_Comp;
            int tmp = Ptr_Glob.variant.Int_Comp;
            Proc_7( 10, Int_Glob, ref tmp );
            Ptr_Glob.variant.Int_Comp = tmp;
        } /* Proc_3 */


        private void Proc_4() /* without parameters */
        /*******/
        /* executed once */
        {
            bool Bool_Loc;

            Bool_Loc = Ch_1_Glob == 'A';
            Bool_Glob = Bool_Loc | Bool_Glob;
            Ch_2_Glob = 'B';
        } /* Proc_4 */


        private void Proc_5() /* without parameters */
        /*******/
        /* executed once */
        {
            Ch_1_Glob = 'A';
            Bool_Glob = false;
        } /* Proc_5 */



        /*
         ****************************************************************************
         *
         *                   "DHRYSTONE" Benchmark Program
         *                   
         *                                                                            
         *  Version:    C, Version 2.1
         *                                                                            
         *  File:       dhry_2.c (part 3 of 3)
         *
         *  Date:       May 25, 1988
         *
         *  Author:     Reinhold P. Weicker
         *
         ****************************************************************************
         */


        private void Proc_6( Enumeration Enum_Val_Par, ref Enumeration Enum_Ref_Par )
        /*********************************/
        /* executed once */
        /* Enum_Val_Par == Ident_3, Enum_Ref_Par becomes Ident_2 */
        {
            Enum_Ref_Par = Enum_Val_Par;
            if(!Func_3( Enum_Val_Par ))
                /* then, not executed */
                Enum_Ref_Par = Enumeration.Ident_4;
            switch(Enum_Val_Par)
            {
                case Enumeration.Ident_1:
                    Enum_Ref_Par = Enumeration.Ident_1;
                    break;
                case Enumeration.Ident_2:
                    if(Int_Glob > 100)
                        /* then */
                        Enum_Ref_Par = Enumeration.Ident_1;
                    else Enum_Ref_Par = Enumeration.Ident_4;
                    break;
                case Enumeration.Ident_3: /* executed */
                    Enum_Ref_Par = Enumeration.Ident_2;
                    break;
                case Enumeration.Ident_4: break;
                case Enumeration.Ident_5:
                    Enum_Ref_Par = Enumeration.Ident_3;
                    break;
            } /* switch */
        } /* Proc_6 */


        private void Proc_7( int Int_1_Par_Val, int Int_2_Par_Val, ref int Int_Par_Ref )
        /**********************************************/
        /* executed three times                                      */
        /* first call:      Int_1_Par_Val == 2, Int_2_Par_Val == 3,  */
        /*                  Int_Par_Ref becomes 7                    */
        /* second call:     Int_1_Par_Val == 10, Int_2_Par_Val == 5, */
        /*                  Int_Par_Ref becomes 17                   */
        /* third call:      Int_1_Par_Val == 6, Int_2_Par_Val == 10, */
        /*                  Int_Par_Ref becomes 18                   */
        {
            int Int_Loc;

            Int_Loc = Int_1_Par_Val + 2;
            Int_Par_Ref = Int_2_Par_Val + Int_Loc;
        } /* Proc_7 */


        private void Proc_8( int[] Arr_1_Par_Ref, int[/*,*/] Arr_2_Par_Ref, int Int_1_Par_Val, int Int_2_Par_Val )
        /*********************************************************************/
        /* executed once      */
        /* Int_Par_Val_1 == 3 */
        /* Int_Par_Val_2 == 7 */
        {
            int Int_Index;
            int Int_Loc;

            Int_Loc = Int_1_Par_Val + 5;
            Arr_1_Par_Ref[Int_Loc] = Int_2_Par_Val;
            Arr_1_Par_Ref[Int_Loc + 1] = Arr_1_Par_Ref[Int_Loc];
            Arr_1_Par_Ref[Int_Loc + 30] = Int_Loc;
            for(Int_Index = Int_Loc; Int_Index <= Int_Loc + 1; ++Int_Index)
                Arr_2_Par_Ref[Int_Loc + Int_Index * 50] = Int_Loc;
            Arr_2_Par_Ref[Int_Loc + ( Int_Loc - 1 ) * 50] += 1;
            Arr_2_Par_Ref[Int_Loc + 20 + ( Int_Loc * 50 )] = Arr_1_Par_Ref[Int_Loc];
            Int_Glob = 5;
        } /* Proc_8 */


        private Enumeration Func_1( char Ch_1_Par_Val, char Ch_2_Par_Val )
        /*************************************************/
        /* executed three times                                         */
        /* first call:      Ch_1_Par_Val == 'H', Ch_2_Par_Val == 'R'    */
        /* second call:     Ch_1_Par_Val == 'A', Ch_2_Par_Val == 'C'    */
        /* third call:      Ch_1_Par_Val == 'B', Ch_2_Par_Val == 'C'    */
        {
            char Ch_1_Loc;
            char Ch_2_Loc;

            Ch_1_Loc = Ch_1_Par_Val;
            Ch_2_Loc = Ch_1_Loc;
            if(Ch_2_Loc != Ch_2_Par_Val)
                /* then, executed */
                return ( Enumeration.Ident_1 );
            else  /* not executed */
            {
                Ch_1_Glob = Ch_1_Loc;
                return ( Enumeration.Ident_2 );
            }
        } /* Func_1 */


        private int STRCMP( char[] a, char[] b )
        {
            int lenA = a.Length;
            int lenB = b.Length;

            int min = lenA < lenB ? lenA : lenB;
            int i = 0;

            if(lenB < min) min = lenB;

            for(; i < min; i++)
            {
                if(a[i] != b[i])
                {
                    return a[i] < b[i] ? -1 : 1;
                }
            }

            return lenA == lenB ? 0 : lenA < lenB ? -1 : 1;
        }

        private bool Func_2( char[] Str_1_Par_Ref, char[] Str_2_Par_Ref )
        /*************************************************/
        /* executed once */
        /* Str_1_Par_Ref == "DHRYSTONE PROGRAM, 1'ST STRING" */
        /* Str_2_Par_Ref == "DHRYSTONE PROGRAM, 2'ND STRING" */
        {
            int Int_Loc;
            char Ch_Loc = '~';

            Int_Loc = 2;
            while(Int_Loc <= 2) /* loop body executed once */
                if(Func_1( Str_1_Par_Ref[Int_Loc],
                            Str_2_Par_Ref[Int_Loc + 1] ) == Enumeration.Ident_1)
                /* then, executed */
                {
                    Ch_Loc = 'A';
                    Int_Loc += 1;
                } /* if, while */
            if(Ch_Loc >= 'W' && Ch_Loc < 'Z')
                /* then, not executed */
                Int_Loc = 7;
            if(Ch_Loc == 'R')
                /* then, not executed */
                return ( true );
            else /* executed */
            {
                if(STRCMP( Str_1_Par_Ref, Str_2_Par_Ref ) > 0)
                /* then, not executed */
                {
                    Int_Loc += 7;
                    Int_Glob = Int_Loc;
                    return ( true );
                }
                else /* executed */
                    return ( false );
            } /* if Ch_Loc */
        } /* Func_2 */


        private bool Func_3( Enumeration Enum_Par_Val )
        /***************************/
        /* executed once        */
        /* Enum_Par_Val == Ident_3 */
        {
            Enumeration Enum_Loc;

            Enum_Loc = Enum_Par_Val;
            if(Enum_Loc == Enumeration.Ident_3)
                /* then, executed */
                return ( true );
            else /* not executed */
                return ( false );
        } /* Func_3 */
    }
}