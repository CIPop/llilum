# This file was automagically generated by mbed.org. For more information, 
# see http://mbed.org/handbook/Exporting-to-GCC-ARM-Embedded

VERBOSE=1

ifndef GCC_BIN
	$(error GCC_BIN is undefined. Define GCC_BIN to point to arm-none-eabi-xxx tools)
endif

# Common settings
PROJECT = GpioInterrupt
MBED_ROOT = $(LLILUM_ROOT)Zelig\mbed
MBED_RTOS_ROOT = $(LLILUM_ROOT)Zelig\mbed-rtos
SOURCE_ROOT = $(LLILUM_ROOT)Zelig\LLVM2IR_results\mbed\GpioInterrupts\mbed_rtos
LIBRARIES = -lmbed 
LD_SYS_LIBS = -lstdc++ -lsupc++ -lm -lc -lgcc -lnosys

ifeq ($(TARGET),)
	$(error TARGET is undefined. Pass in TARGET for desired board)
endif

ifeq ($(TARGET),LPC1768)
	OBJECTS = $(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\TARGET_M3\TOOLCHAIN_GCC\HAL_CM3.o $(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\TARGET_M3\TOOLCHAIN_GCC\SVC_Table.o $(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\HAL_CM.o $(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\RTX_Conf_CM.o $(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\rt_CMSIS.o $(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\rt_Event.o $(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\rt_List.o $(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\rt_Mailbox.o $(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\rt_MemBox.o $(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\rt_Mutex.o $(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\rt_Robin.o $(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\rt_Semaphore.o $(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\rt_System.o $(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\rt_Task.o $(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\rt_Time.o $(TARGET)\main.o $(MBED_RTOS_ROOT)\rtos\Mutex.o $(MBED_RTOS_ROOT)\rtos\RtosTimer.o $(MBED_RTOS_ROOT)\rtos\Semaphore.o $(MBED_RTOS_ROOT)\rtos\Thread.o 
	SYS_OBJECTS = $(MBED_ROOT)\TARGET_LPC1768\TOOLCHAIN_GCC_ARM\board.o $(MBED_ROOT)\TARGET_LPC1768\TOOLCHAIN_GCC_ARM\cmsis_nvic.o $(MBED_ROOT)\TARGET_LPC1768\TOOLCHAIN_GCC_ARM\retarget.o $(MBED_ROOT)\TARGET_LPC1768\TOOLCHAIN_GCC_ARM\startup_LPC17xx.o $(MBED_ROOT)\TARGET_LPC1768\TOOLCHAIN_GCC_ARM\system_LPC17xx.o 
	INCLUDE_PATHS = -I. -I$(MBED_ROOT) -I$(MBED_RTOS_ROOT) -I$(MBED_RTOS_ROOT)\rtos -I$(MBED_RTOS_ROOT)\rtx -I$(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M -I$(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\TARGET_M3 -I$(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\TARGET_M3\TOOLCHAIN_GCC -I$(SOURCE_ROOT)\mbed -I$(MBED_ROOT)\TARGET_LPC1768 -I$(MBED_ROOT)\TARGET_LPC1768\TARGET_NXP -I$(MBED_ROOT)\TARGET_LPC1768\TARGET_NXP\TARGET_LPC176X -I$(MBED_ROOT)\TARGET_LPC1768\TARGET_NXP\TARGET_LPC176X\TARGET_MBED_LPC1768 -I$(MBED_ROOT)\TARGET_LPC1768\TOOLCHAIN_GCC_ARM 
	LIBRARY_PATHS = -L$(MBED_ROOT)\TARGET_LPC1768\TOOLCHAIN_GCC_ARM 
	LINKER_SCRIPT = $(MBED_ROOT)\TARGET_LPC1768\TOOLCHAIN_GCC_ARM\LPC1768.ld

	CPU = -mcpu=cortex-m3 -mthumb 
	CC_FLAGS = $(CPU) -c -g -fno-common -fmessage-length=0 -Wall -Wextra -fno-exceptions -ffunction-sections -fdata-sections -fomit-frame-pointer -MMD -MP
	CC_SYMBOLS = -DTOOLCHAIN_GCC_ARM -DTOOLCHAIN_GCC -DARM_MATH_CM3 -DMBED_BUILD_TIMESTAMP=1446568245.6 -DTARGET_CORTEX_M -DTARGET_LPC176X -DTARGET_NXP -DTARGET_MBED_LPC1768 -DTARGET_LPC1768 -D__CORTEX_M3 -DTARGET_M3 -D__MBED__=1 
	LD_FLAGS = $(CPU) -Wl,--gc-sections --specs=nano.specs -u _printf_float -u _scanf_float -Wl,--wrap,main -Wl,-Map=${TARGET}\$(PROJECT).map,--cref
    
else ifeq ($(TARGET),K64F)
	OBJECTS = $(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\TARGET_M4\TOOLCHAIN_GCC\HAL_CM4.o $(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\TARGET_M4\TOOLCHAIN_GCC\SVC_Table.o $(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\HAL_CM.o $(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\RTX_Conf_CM.o $(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\rt_CMSIS.o $(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\rt_Event.o $(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\rt_List.o $(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\rt_Mailbox.o $(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\rt_MemBox.o $(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\rt_Mutex.o $(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\rt_Robin.o $(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\rt_Semaphore.o $(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\rt_System.o $(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\rt_Task.o $(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\rt_Time.o $(TARGET)\main.o $(MBED_RTOS_ROOT)\rtos\Mutex.o $(MBED_RTOS_ROOT)\rtos\RtosTimer.o $(MBED_RTOS_ROOT)\rtos\Semaphore.o $(MBED_RTOS_ROOT)\rtos\Thread.o 
	SYS_OBJECTS = $(MBED_ROOT)\TARGET_K64F\TOOLCHAIN_GCC_ARM\board.o $(MBED_ROOT)\TARGET_K64F\TOOLCHAIN_GCC_ARM\cmsis_nvic.o $(MBED_ROOT)\TARGET_K64F\TOOLCHAIN_GCC_ARM\mbed_overrides.o $(MBED_ROOT)\TARGET_K64F\TOOLCHAIN_GCC_ARM\retarget.o $(MBED_ROOT)\TARGET_K64F\TOOLCHAIN_GCC_ARM\startup_MK64F12.o $(MBED_ROOT)\TARGET_K64F\TOOLCHAIN_GCC_ARM\system_MK64F12.o 
	INCLUDE_PATHS = -I. -I$(MBED_ROOT) -I$(MBED_RTOS_ROOT) -I$(MBED_RTOS_ROOT)\rtos -I$(MBED_RTOS_ROOT)\rtx -I$(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M -I$(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\TARGET_M4 -I$(MBED_RTOS_ROOT)\rtx\TARGET_CORTEX_M\TARGET_M4\TOOLCHAIN_GCC -I$(SOURCE_ROOT)\mbed -I$(MBED_ROOT)\TARGET_K64F -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\common -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\common\phyksz8081 -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\drivers -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\drivers\clock -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\drivers\enet -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\drivers\interrupt -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\drivers\pit -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\drivers\pit\common -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\hal -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\hal\adc -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\hal\can -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\hal\dac -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\hal\dmamux -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\hal\dspi -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\hal\edma -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\hal\enet -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\hal\flextimer -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\hal\gpio -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\hal\i2c -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\hal\llwu -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\hal\lptmr -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\hal\lpuart -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\hal\mcg -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\hal\mpu -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\hal\osc -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\hal\pdb -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\hal\pit -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\hal\pmc -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\hal\port -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\hal\rcm -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\hal\rtc -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\hal\sai -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\hal\sdhc -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\hal\sim -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\hal\smc -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\hal\uart -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\hal\wdog -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_KPSDK_CODE\utilities -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_MCU_K64F -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_MCU_K64F\MK64F12 -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_MCU_K64F\TARGET_FRDM -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_MCU_K64F\device -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_MCU_K64F\device\MK64F12 -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_MCU_K64F\device\device -I$(MBED_ROOT)\TARGET_K64F\TARGET_Freescale\TARGET_KPSDK_MCUS\TARGET_MCU_K64F\device\device\MK64F12 -I$(MBED_ROOT)\TARGET_K64F\TOOLCHAIN_GCC_ARM 
	LIBRARY_PATHS = -L$(MBED_ROOT)\TARGET_K64F\TOOLCHAIN_GCC_ARM 
	LINKER_SCRIPT = $(MBED_ROOT)\TARGET_K64F\TOOLCHAIN_GCC_ARM\K64FN1M0xxx12.ld

	ifeq ($(HARDFP),1)
		FLOAT_ABI = hard
	else
		FLOAT_ABI = softfp
	endif

	CPU = -mcpu=cortex-m4 -mthumb -mfpu=fpv4-sp-d16 -mfloat-abi=$(FLOAT_ABI) 
	CC_FLAGS = $(CPU) -c -g -fno-common -fmessage-length=0 -Wall -Wextra -fno-exceptions -ffunction-sections -fdata-sections -fomit-frame-pointer -MMD -MP
	CC_SYMBOLS = -DTARGET_KPSDK_MCUS -DTARGET_FF_ARDUINO -DTOOLCHAIN_GCC_ARM -DTOOLCHAIN_GCC -DCPU_MK64FN1M0VMD12 -DTARGET_FRDM -DTARGET_CORTEX_M -DMBED_BUILD_TIMESTAMP=1446571491.65 -D__FPU_PRESENT=1 -DTARGET_KPSDK_CODE -DTARGET_M4 -D__MBED__=1 -DTARGET_K64F -DTARGET_Freescale -D__CORTEX_M4 -DFSL_RTOS_MBED -DTARGET_MCU_K64F -DARM_MATH_CM4 
	LD_FLAGS = $(CPU) -Wl,--gc-sections --specs=nano.specs -u _printf_float -u _scanf_float -Wl,--wrap,main -Wl,-Map=${TARGET}\$(PROJECT).map,--cref
else
	$(error TARGET is not recognized. Please check the value passed in)
endif

DEPS = $(OBJECTS:.o=.d)

############################################################################### 
AS      = $(GCC_BIN)arm-none-eabi-as
CC      = $(GCC_BIN)arm-none-eabi-gcc
CPP     = $(GCC_BIN)arm-none-eabi-g++
LD      = $(GCC_BIN)arm-none-eabi-gcc
OBJCOPY = $(GCC_BIN)arm-none-eabi-objcopy
OBJDUMP = $(GCC_BIN)arm-none-eabi-objdump
SIZE    = $(GCC_BIN)arm-none-eabi-size 

ifeq ($(DEBUG), 1)
  CC_FLAGS += -DDEBUG -O0
else
  CC_FLAGS += -DNDEBUG -Os
endif

.PHONY: all clean lst size

all: ${TARGET} ${TARGET}\$(PROJECT).bin ${TARGET}\$(PROJECT).hex $(TARGET)\$(PROJECT).lst $(TARGET)\$(PROJECT).disasm size

clean: ${TARGET}
	@rmdir /q /s $(TARGET)

# Ensures the target directory has been created.
${TARGET}:
	@mkdir $@

$(TARGET)\\%.o : %.asm
	$(AS) $(CPU) $(AS_FLAGS) -o $@ $<
    
$(TARGET)\\%.o : %.S
	$(AS) $(CPU) $(AS_FLAGS) -o $@ $<

$(TARGET)\\%.o : %.s
	$(AS) $(CPU) $(AS_FLAGS) -o $@ $<
    
$(TARGET)\\%.o : %.c
	$(CC)  $(CC_FLAGS) $(CC_SYMBOLS) -std=gnu99   $(INCLUDE_PATHS) -o $@ $<

$(TARGET)\\%.o : $(SOURCE_ROOT)\%.cpp
	$(CPP) $(CC_FLAGS) $(CC_SYMBOLS) -std=gnu++98 -fno-rtti $(INCLUDE_PATHS) -o $@ $<

$(TARGET)\$(PROJECT).elf: $(OBJECTS) $(SYS_OBJECTS)
	$(LD) $(LD_FLAGS) -T$(LINKER_SCRIPT) $(LIBRARY_PATHS) -o $@ $^ $(LIBRARIES) $(LD_SYS_LIBS) $(LIBRARIES) $(LD_SYS_LIBS)

$(TARGET)\$(PROJECT).bin: $(TARGET)\$(PROJECT).elf
	$(OBJCOPY) -O binary $< $@

$(TARGET)\$(PROJECT).hex: $(TARGET)\$(PROJECT).elf
	@$(OBJCOPY) -O ihex $< $@

$(TARGET)\$(PROJECT).lst: $(TARGET)\$(PROJECT).elf
	@$(OBJDUMP) -Sdh $< > $@

$(TARGET)\$(PROJECT).disasm: $(TARGET)\$(PROJECT).elf
	@$(OBJDUMP) -D $< > $@

size: $(TARGET)\$(PROJECT).elf
	@echo Size report...
	$(SIZE) $<

#DEPS = $(OBJECTS:.o=.d) $(SYS_OBJECTS:.o=.d)
#-include $(DEPS)


